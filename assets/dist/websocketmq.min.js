window.WebSocketMQ=window.WebSocketMQ||{},WebSocketMQ.Client=class{constructor(e={}){if(this.options=Object.assign({url:null,reconnect:!0,reconnectInterval:1e3,maxReconnectInterval:3e4,reconnectMultiplier:1.5,devMode:!1},e),!this.options.url)throw new Error("WebSocketMQ: URL is required");this.ws=null,this.isConnected=!1,this.isConnecting=!1,this.reconnectAttempts=0,this.reconnectTimer=null,this.subscriptions=new Map,this.onConnectCallbacks=[],this.onDisconnectCallbacks=[],this.onErrorCallbacks=[],this._onMessage=this._onMessage.bind(this),this._onOpen=this._onOpen.bind(this),this._onClose=this._onClose.bind(this),this._onError=this._onError.bind(this),this.options.devMode&&this._setupDevMode()}connect(){if(this.isConnected||this.isConnecting)return;this.isConnecting=!0;try{this.ws=new WebSocket(this.options.url),this.ws.addEventListener("open",this._onOpen),this.ws.addEventListener("message",this._onMessage),this.ws.addEventListener("close",this._onClose),this.ws.addEventListener("error",this._onError)}catch(e){this.isConnecting=!1,this._handleError(e),this._scheduleReconnect()}}disconnect(){if(!this.ws)return;if(clearTimeout(this.reconnectTimer),this.reconnectTimer=null,this.options.reconnect=!1,this.isConnected||this.isConnecting)try{this.ws.close(1e3,"Client disconnected")}catch{}}publish(e,t){if(!this.isConnected)throw new Error("WebSocketMQ: Not connected");const n={header:{messageID:this._generateID(),type:"event",topic:e,timestamp:Date.now()},body:t};return this._sendMessage(n),!0}subscribe(e,t){if(!t||typeof t!="function")throw new Error("WebSocketMQ: Handler must be a function");if(!this.subscriptions.has(e)&&(this.subscriptions.set(e,[]),this.isConnected)){const t={header:{messageID:this._generateID(),type:"subscribe",topic:"subscribe",timestamp:Date.now()},body:e};this._sendMessage(t)}const n=this.subscriptions.get(e);return n.push(t),()=>{const s=n.indexOf(t);if(s!==-1&&(n.splice(s,1),n.length===0&&(this.subscriptions.delete(e),this.isConnected))){const t={header:{messageID:this._generateID(),type:"unsubscribe",topic:"unsubscribe",timestamp:Date.now()},body:e};this._sendMessage(t)}}}request(e,t,n=5e3){return this.isConnected?new Promise((s,o)=>{const i=this._generateID(),r=setTimeout(()=>{const e=this.subscriptions.get(i)||[],t=e.indexOf(a);t!==-1&&e.splice(t,1),e.length===0&&this.subscriptions.delete(i),o(new Error("WebSocketMQ: Request timed out"))},n),a=(e,t)=>{clearTimeout(r);const n=this.subscriptions.get(i)||[],c=n.indexOf(a);if(c!==-1&&n.splice(c,1),n.length===0&&this.subscriptions.delete(i),t.header.type==="error"){o(new Error(e.error||"WebSocketMQ: Request failed"));return}s(e)};this.subscriptions.has(i)||this.subscriptions.set(i,[]);const c=this.subscriptions.get(i);c.push(a);const l={header:{messageID:this._generateID(),correlationID:i,type:"request",topic:e,timestamp:Date.now(),ttl:n},body:t};this._sendMessage(l)}):Promise.reject(new Error("WebSocketMQ: Not connected"))}onConnect(e){if(typeof e=="function"&&(this.onConnectCallbacks.push(e),this.isConnected))try{e()}catch(e){console.error("WebSocketMQ: Error in connect callback",e)}}onDisconnect(e){typeof e=="function"&&this.onDisconnectCallbacks.push(e)}onError(e){typeof e=="function"&&this.onErrorCallbacks.push(e)}_onOpen(e){this.isConnected=!0,this.isConnecting=!1,this.reconnectAttempts=0;for(const[e,t]of this.subscriptions.entries())if(t.length>0&&!e.match(/^[0-9a-f]{8}-/)){const t={header:{messageID:this._generateID(),type:"subscribe",topic:"subscribe",timestamp:Date.now()},body:e};this._sendMessage(t)}for(const t of this.onConnectCallbacks)try{t(e)}catch(e){console.error("WebSocketMQ: Error in connect callback",e)}}_onClose(e){const t=this.isConnected;if(this.isConnected=!1,this.isConnecting=!1,t)for(const t of this.onDisconnectCallbacks)try{t(e)}catch(e){console.error("WebSocketMQ: Error in disconnect callback",e)}this.options.reconnect&&this._scheduleReconnect()}_onError(e){this._handleError(e)}_onMessage(e){try{const t=JSON.parse(e.data),n=t.header.topic||t.header.correlationID,s=this.subscriptions.get(n)||[];for(const e of s)try{if(t.header.type==="request"){{console.log(`WebSocketMQ: Handling request for topic ${n}`,t);const s=e(t.body,t);if(s&&typeof s.then=="function")s.then(e=>{if(e!==void 0){const s={header:{messageID:this._generateID(),correlationID:t.header.correlationID,type:"response",topic:t.header.correlationID,timestamp:Date.now()},body:e};console.log(`WebSocketMQ: Sending async response for ${n}`,s),this._sendMessage(s)}}).catch(e=>{console.error(`WebSocketMQ: Error in async handler for ${n}`,e);const s={header:{messageID:this._generateID(),correlationID:t.header.correlationID,type:"error",topic:t.header.correlationID,timestamp:Date.now()},body:{error:e.message||"Unknown error"}};this._sendMessage(s)});else if(s!==void 0){const e={header:{messageID:this._generateID(),correlationID:t.header.correlationID,type:"response",topic:t.header.correlationID,timestamp:Date.now()},body:s};console.log(`WebSocketMQ: Sending sync response for ${n}`,e),this._sendMessage(e)}}}else e(t.body,t)}catch(e){if(console.error(`WebSocketMQ: Error in message handler for topic ${n}`,e),t.header.type==="request"&&t.header.correlationID){const n={header:{messageID:this._generateID(),correlationID:t.header.correlationID,type:"error",topic:t.header.correlationID,timestamp:Date.now()},body:{error:e.message||"Unknown error"}};this._sendMessage(n)}}}catch(e){this._handleError(new Error(`WebSocketMQ: Failed to parse message: ${e.message}`))}}_sendMessage(e){if(!this.isConnected)throw new Error("WebSocketMQ: Not connected");try{const t=JSON.stringify(e);return this.ws.send(t),!0}catch(e){return this._handleError(e),!1}}_handleError(e){for(const t of this.onErrorCallbacks)try{t(e)}catch(e){console.error("WebSocketMQ: Error in error callback",e)}}_scheduleReconnect(){if(!this.options.reconnect||this.reconnectTimer)return;const e=Math.min(this.options.reconnectInterval*Math.pow(this.options.reconnectMultiplier,this.reconnectAttempts),this.options.maxReconnectInterval);this.reconnectAttempts++,this.reconnectTimer=setTimeout(()=>{this.reconnectTimer=null,this.connect()},e)}_generateID(){return Date.now().toString(36)+Math.random().toString(36).substring(2)}_setupDevMode(){this.onConnect(()=>{this.subscribe("_dev.hotreload",()=>{console.log("WebSocketMQ: Hot reload triggered, refreshing page..."),window.location.reload()}),console.log("WebSocketMQ: Development mode active - JS error reporting enabled")}),window.addEventListener("error",e=>{if(!this.isConnected){console.warn("WebSocketMQ: Cannot report error - not connected");return}console.log("WebSocketMQ: Caught JS error, reporting to server");const t={message:e.message,source:e.filename,lineno:e.lineno,colno:e.colno,stack:e.error?e.error.stack:null,timestamp:(new Date).toISOString()};try{this.publish("_dev.js-error",t),console.log("WebSocketMQ: Error reported to server")}catch(e){console.error("WebSocketMQ: Failed to report error to server:",e)}}),window.addEventListener("unhandledrejection",e=>{if(!this.isConnected){console.warn("WebSocketMQ: Cannot report rejection - not connected");return}console.log("WebSocketMQ: Caught unhandled rejection, reporting to server");const t={message:e.reason?e.reason.message||String(e.reason):"Unhandled Promise Rejection",stack:e.reason&&e.reason.stack?e.reason.stack:null,timestamp:(new Date).toISOString()};try{this.publish("_dev.js-error",t),console.log("WebSocketMQ: Rejection reported to server")}catch(e){console.error("WebSocketMQ: Failed to report rejection to server:",e)}})}}