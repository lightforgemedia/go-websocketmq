(function(e,t){typeof define=="function"&&define.amd?define([],t):typeof module=="object"&&module.exports?module.exports=t():e.WebSocketMQ=t()})(typeof self!="undefined"?self:this,function(){class e{constructor(e){this.url=e.url,this.reconnect=e.reconnect!==!1,this.reconnectInterval=e.reconnectInterval||1e3,this.maxReconnectInterval=e.maxReconnectInterval||3e4,this.reconnectMultiplier=e.reconnectMultiplier||1.5,this.devMode=e.devMode||!1,this.ws=null,this.subs=new Map,this.connectCallbacks=[],this.disconnectCallbacks=[],this.errorCallbacks=[],this.currentReconnectInterval=this.reconnectInterval,this.reconnectTimer=null,this.isConnecting=!1,this.isConnected=!1,this.devMode&&this._setupDevMode()}connect(){if(this.isConnecting||this.isConnected)return;this.isConnecting=!0,this.ws=new WebSocket(this.url),this.ws.onopen=e=>{this.isConnecting=!1,this.isConnected=!0,this.currentReconnectInterval=this.reconnectInterval,this._notifyCallbacks(this.connectCallbacks,e)},this.ws.onclose=e=>{this.isConnecting=!1,this.isConnected=!1,this._notifyCallbacks(this.disconnectCallbacks,e),this.reconnect&&!e.wasClean&&this._scheduleReconnect()},this.ws.onerror=e=>{this._notifyCallbacks(this.errorCallbacks,e)},this.ws.onmessage=e=>{try{const t=JSON.parse(e.data),n=t.header.topic||t.header.correlationID;if(this.subs.has(n)){const e=this.subs.get(n);for(const s of e){const n=s(t.body,t);t.header.type==="request"&&t.header.correlationID&&n!==void 0&&Promise.resolve(n).then(e=>{this._sendResponse(t.header.correlationID,e)}).catch(e=>{console.error("Error in request handler:",e)})}}}catch(e){console.error("Error processing message:",e)}}}disconnect(){this.ws&&(this.reconnect=!1,this.ws.close(),this.ws=null),this.reconnectTimer&&(clearTimeout(this.reconnectTimer),this.reconnectTimer=null)}subscribe(e,t){this.subs.has(e)||this.subs.set(e,[]);const n=this.subs.get(e);return n.push(t),()=>{const s=n.indexOf(t);s!==-1&&(n.splice(s,1),n.length===0&&this.subs.delete(e))}}publish(e,t){if(!this.isConnected)throw new Error("Not connected");const n={header:{messageID:this._generateID(),type:"event",topic:e,timestamp:Date.now()},body:t};this.ws.send(JSON.stringify(n))}request(e,t,n=5e3){return this.isConnected?new Promise((s,o)=>{const i=this._generateID(),a=setTimeout(()=>{this.subs.has(i)&&this.subs.delete(i),o(new Error(`Request timed out after ${n}ms`))},n);this.subscribe(i,e=>{clearTimeout(a),this.subs.has(i)&&this.subs.delete(i),s(e)});const r={header:{messageID:i,correlationID:i,type:"request",topic:e,timestamp:Date.now(),ttl:n},body:t};this.ws.send(JSON.stringify(r))}):Promise.reject(new Error("Not connected"))}onConnect(e){this.connectCallbacks.push(e),this.isConnected&&e()}onDisconnect(e){this.disconnectCallbacks.push(e)}onError(e){this.errorCallbacks.push(e)}_generateID(){return typeof crypto!="undefined"&&crypto.randomUUID?crypto.randomUUID():Date.now().toString(36)+Math.random().toString(36).substring(2)}_sendResponse(e,t){const n={header:{messageID:this._generateID(),correlationID:e,type:"response",timestamp:Date.now()},body:t};this.ws.send(JSON.stringify(n))}_scheduleReconnect(){this.reconnectTimer&&clearTimeout(this.reconnectTimer),this.reconnectTimer=setTimeout(()=>{this.reconnectTimer=null,this.connect()},this.currentReconnectInterval),this.currentReconnectInterval=Math.min(this.currentReconnectInterval*this.reconnectMultiplier,this.maxReconnectInterval)}_notifyCallbacks(e,t){for(const n of e)try{n(t)}catch(e){console.error("Error in callback:",e)}}_setupDevMode(){this.subscribe("_dev.hotreload",e=>{console.log("[WebSocketMQ] Hot reload triggered:",e),window.location.reload()}),window.addEventListener("error",e=>{if(!this.isConnected)return;this.publish("_dev.js-error",{type:"error",message:e.message,filename:e.filename,lineno:e.lineno,colno:e.colno,stack:e.error?e.error.stack:null,timestamp:Date.now()})}),window.addEventListener("unhandledrejection",e=>{if(!this.isConnected)return;this.publish("_dev.js-error",{type:"unhandledrejection",message:e.reason?e.reason.message||String(e.reason):"Unknown promise rejection",stack:e.reason&&e.reason.stack?e.reason.stack:null,timestamp:Date.now()})}),console.log("[WebSocketMQ] Development mode enabled")}}return{Client:e}})