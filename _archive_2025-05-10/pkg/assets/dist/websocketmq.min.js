// assets/dist/websocketmq.min.js
window.WebSocketMQ=window.WebSocketMQ||{},WebSocketMQ.Client=class{constructor(e={}){if(this.options=Object.assign({url:null,reconnect:!0,reconnectInterval:1e3,maxReconnectInterval:3e4,reconnectMultiplier:1.5,devMode:!1,logger:console,pageSessionID:null,clientRegisterTopic:"_client.register"},e),!this.options.url)throw new Error("WebSocketMQ: URL is required");this.logger=this.options.logger,this.ws=null,this.isConnected=!1,this.isConnecting=!1,this.reconnectAttempts=0,this.reconnectTimer=null,this.explicitlyClosed=!1,this.subscriptions=new Map,this.onConnectCallbacks=new Set,this.onDisconnectCallbacks=new Set,this.onErrorCallbacks=new Set,this._onMessage=this._onMessage.bind(this),this._onOpen=this._onOpen.bind(this),this._onClose=this._onClose.bind(this),this._onError=this._onError.bind(this),this.options.devMode&&this._setupDevMode()}connect(){this.isConnected||this.isConnecting?(this.logger.debug("WebSocketMQ: Already connected or connecting."),void 0):(this.isConnecting=!0,this.explicitlyClosed=!1,this.logger.debug("WebSocketMQ: Connecting to",this.options.url),void 0);try{this.ws=new WebSocket(this.options.url),this.ws.addEventListener("open",this._onOpen),this.ws.addEventListener("message",this._onMessage),this.ws.addEventListener("close",this._onClose),this.ws.addEventListener("error",this._onError)}catch(e){this.isConnecting=!1,this._handleError(e),this.explicitlyClosed||this._scheduleReconnect()}}disconnect(){this.logger.debug("WebSocketMQ: Disconnect called."),this.explicitlyClosed=!0,clearTimeout(this.reconnectTimer),this.reconnectTimer=null,this.ws&&void 0;try{this.ws.close(1e3,"Client disconnected")}catch{}}_registerClientSession(){if(this.options.pageSessionID&&this.options.clientRegisterTopic){this.logger.info(`WebSocketMQ: Registering PageSessionID: ${this.options.pageSessionID}`);try{this.publish(this.options.clientRegisterTopic,{pageSessionID:this.options.pageSessionID})}catch(e){this.logger.error("WebSocketMQ: Failed to send registration message:",e)}}}publish(e,t){if(!this.isConnected)throw this.logger.warn("WebSocketMQ: Not connected. Cannot publish."),new Error("WebSocketMQ: Not connected");const s={header:{messageID:this._generateID(),type:"event",topic:e,timestamp:Date.now()},body:t};this._sendMessage(s),this.logger.debug("WebSocketMQ: Published to",e,t);return!0}subscribe(e,t){if(!t||"function"!=typeof t)throw new Error("WebSocketMQ: Handler must be a function");this.subscriptions.has(e)||this.subscriptions.set(e,new Set),this.subscriptions.get(e).add(t),this.logger.debug("WebSocketMQ: Subscribed to topic:",e);return()=>{if(this.subscriptions.has(e)){const s=this.subscriptions.get(e);s.delete(t),0===s.size&&(this.subscriptions.delete(e),this.logger.debug("WebSocketMQ: Unsubscribed from topic (last handler removed):",e),void 0)}}}request(e,t,s=5e3){return this.isConnected?new Promise((i,o)=>{const n=this._generateID();let r=null;const a=(t,s)=>{clearTimeout(r),this.subscriptions.has(n)&&void 0;const c=this.subscriptions.get(n);c.delete(a),0===c.size&&this.subscriptions.delete(n),"error"===s.header.type?(this.logger.warn("WebSocketMQ: Request to",e,"failed with error:",t),o(t.error?new Error(t.error.message||t.error):new Error("Request failed"))):(this.logger.debug("WebSocketMQ: Response for",e,"(CorrID",n,"):",t),i(t))};this.subscriptions.has(n)||this.subscriptions.set(n,new Set),this.subscriptions.get(n).add(a),r=setTimeout(()=>{this.subscriptions.has(n)&&void 0;const t=this.subscriptions.get(n);t.delete(a),0===t.size&&this.subscriptions.delete(n),this.logger.warn("WebSocketMQ: Request to",e,"timed out for CorrID",n),o(new Error("WebSocketMQ: Request timed out"))},s);const c={header:{messageID:this._generateID(),correlationID:n,type:"request",topic:e,timestamp:Date.now(),ttl:s},body:t};this._sendMessage(c),this.logger.debug("WebSocketMQ: Sent request to",e,"(CorrID",n,"):",t)}):(this.logger.warn("WebSocketMQ: Not connected. Cannot send request."),Promise.reject(new Error("WebSocketMQ: Not connected")))}onConnect(e){this.onConnectCallbacks.add(e),this.isConnected&&e()}onDisconnect(e){this.onDisconnectCallbacks.add(e)}onError(e){this.onErrorCallbacks.add(e)}_onOpen(e){this.isConnected=!0,this.isConnecting=!1,this.reconnectAttempts=0,this.logger.info("WebSocketMQ: Connected."),this._registerClientSession(),this.onConnectCallbacks.forEach(t=>{try{t(e)}catch(e){this.logger.error("Error in onConnect callback",e)}})}_onClose(e){const t=this.isConnected;this.isConnected=!1,this.isConnecting=!1,this.logger.info("WebSocketMQ: Disconnected. Code:",e.code,"Reason:",e.reason,"WasClean:",e.wasClean),t&&this.onDisconnectCallbacks.forEach(t=>{try{t(e)}catch(e){this.logger.error("Error in onDisconnect callback",e)}}),!this.explicitlyClosed&&this.options.reconnect&&this._scheduleReconnect()}_onError(e){const t=e instanceof Error?e:new Error("WebSocket error");this.logger.error("WebSocketMQ: Error:",t,"Raw event:",e),this.onErrorCallbacks.forEach(s=>{try{s(t,e)}catch(e){this.logger.error("Error in onError callback",e)}})}_onMessage(e){let t;try{t=JSON.parse(e.data),this.logger.debug("WebSocketMQ: Received message:",t)}catch(s){return this._handleError(new Error(`WebSocketMQ: Failed to parse message: ${s.message}. Data: ${e.data}`)),void 0}const s=t.header.topic,i=this.subscriptions.get(s);i&&i.size>0?i.forEach(async e=>{try{"request"===t.header.type?(this.logger.debug("WebSocketMQ: Handling server-initiated request for action:",s),void 0):e(t.body,t);const i=await e(t.body,t);void 0===i||!t.header.correlationID||void 0;const o={header:{messageID:this._generateID(),correlationID:t.header.correlationID,type:"response",topic:t.header.correlationID,timestamp:Date.now()},body:i};this._sendMessage(o),this.logger.debug("WebSocketMQ: Sent response for server-initiated request on action",s,"Result:",i)}catch(e){this.logger.error(`WebSocketMQ: Error in message handler for topic ${s}:`,e),"request"===t.header.type&&t.header.correlationID&&void 0;const i={header:{messageID:this._generateID(),correlationID:t.header.correlationID,type:"error",topic:t.header.correlationID,timestamp:Date.now()},body:{error:{message:e.message||"Handler error"}}};this._sendMessage(i)}}):this.logger.debug("WebSocketMQ: No handlers for topic:",s,"Message type:",t.header.type)}_sendMessage(e){if(!this.isConnected||!this.ws||this.ws.readyState!==WebSocket.OPEN)return this.logger.warn("WebSocketMQ: Not connected or WebSocket not open. Cannot send message."),!1;try{return this.ws.send(JSON.stringify(e)),!0}catch(e){return this._handleError(e),!1}}_handleError(e){this.logger.error("WebSocketMQ: Handling error:",e),this.onErrorCallbacks.forEach(t=>{try{t(e)}catch(e){this.logger.error("Error in _handleError's onError callback",e)}})}_scheduleReconnect(){if(this.explicitlyClosed||!this.options.reconnect||this.reconnectTimer)return;this.reconnectAttempts++;const e=Math.min(this.options.reconnectInterval*Math.pow(this.options.reconnectMultiplier,this.reconnectAttempts-1),this.options.maxReconnectInterval);this.logger.info(`WebSocketMQ: Scheduling reconnect attempt ${this.reconnectAttempts} in ${e}ms.`),this.reconnectTimer=setTimeout(()=>{this.reconnectTimer=null,this.explicitlyClosed||this.connect()},e)}_generateID(){return Date.now().toString(36)+Math.random().toString(36).substring(2,10)}_setupDevMode(){this.onConnect(()=>{this.subscribe("_dev.hotreload",()=>{this.logger.info("WebSocketMQ: Hot reload triggered, refreshing page..."),window.location.reload()}),this.logger.info("WebSocketMQ: Development mode active - JS error reporting enabled.")});const e=t=>{this.isConnected?(this.logger.debug("WebSocketMQ: Reporting JS error to server:",t),void 0):this.logger.warn("WebSocketMQ: Cannot report JS error - not connected",t);try{this.publish("_dev.js-error",t)}catch(e){this.logger.error("WebSocketMQ: Failed to report JS error to server:",e)}};window.addEventListener("error",t=>{e({message:t.message,source:t.filename,lineno:t.lineno,colno:t.colno,stack:t.error?t.error.stack:null,timestamp:(new Date).toISOString(),type:"window.onerror"})}),window.addEventListener("unhandledrejection",t=>{e({message:t.reason?t.reason.message||String(t.reason):"Unhandled Promise Rejection",stack:t.reason&&t.reason.stack?t.reason.stack:null,timestamp:(new Date).toISOString(),type:"unhandledrejection"})})}}